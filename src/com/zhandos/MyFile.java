package com.zhandos;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import java.util.Scanner;

class MyFile {
    // выводит список всех файлов и директорий для `path` - ls
    public static void listDirectory(String path) { //TODO only ls without path
        try {
            File file = new File(path);
            String[] fileList = file.list();
            for(String fileOrDir : fileList) {
                System.out.println(fileOrDir);
            }
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // выводит список файлов с расширением `.py` в `path` - ls_py
    public static void listPythonFiles(String path) {
        try {
            File file = new File(path);
            File[] fileList = file.listFiles(new FilenameFilter() {
                @Override
                public boolean accept(File dir, String name) {
                    return name.toLowerCase().endsWith(".py");
                }
            });
            for(File pythonFile : fileList) {
                System.out.println(pythonFile.getName());
            }
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // выводит `true`, если `path` это директория, в других случаях `false` - id_dir
    public static void isDirectory(String path) {
        try {
            File file = new File(path);
            boolean isDir = file.isDirectory();
            System.out.println(isDir);
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // выводит `директория` или `файл` в зависимости от типа `path` - define
    public static void define(String path) {
        try {
            File file = new File(path);
            if (file.isFile()) {
                System.out.println("файл");
            } else if (file.isDirectory()) {
                System.out.println("директория");
            } else {
                System.out.println("не файл и не директория");
            }
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // выводит права для файла в формате `rwx` для текущего пользователя - readmod
    public static void printPermissions(String path) {
        try {
            File file = new File(path);
            StringBuilder perms = new StringBuilder("---");
            if (file.canRead()) { perms.setCharAt(0, 'r');}
            if (file.canWrite()) { perms.setCharAt(1, 'w');}
            if (file.canExecute()) {perms.setCharAt(2, 'x');}
            System.out.println(perms);
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // устанавливает права для файла `path` - setmod
    public static void setPermissions(String path, String permissions) {
        try {
            File file = new File(path);
            if (permissions.length()!=3) {
                System.out.println("Please enter permission in this format: rwx");
                return;
            }
            if (permissions.charAt(0)=='r') {
                file.setReadable(true);
            } else if (permissions.charAt(0)=='-') {
                file.setReadable(false);
            }
            if (permissions.charAt(1)=='w') {
                file.setWritable(true);
            } else if (permissions.charAt(1)=='-') {
                file.setWritable(false);
            }
            if (permissions.charAt(2)=='x') {
                file.setExecutable(true);
            } else if (permissions.charAt(2)=='-') {
                file.setExecutable(false);
            }
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // выводит контент файла - cat
    public static void printContent(String path) {
        try {
            Scanner file = new Scanner(new File(path));
            while (file.hasNextLine()) {
                System.out.println(file.nextLine());
            }
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // добавляет строке `# Autogenerated line` в конец `path` - append
    public static void appendFooter(String path) {
        try {
            FileWriter file = new FileWriter(path, true);
            file.write("# Autogenerated line");
            file.close();
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`. `path` может быть директорией или файлом. При директории, копируется весь контент. - bc
    public static void createBackup(String path) {
        try {
            File file = new File(path);
            LocalDate date = LocalDate.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            String convertedDate = formatter.format(date);
            String destDir = String.format("/tmp/${%s}.backup/", convertedDate);
            String destFile = String.format("/tmp/${%s}.backup/%s", convertedDate, file.getName());
            File dest = new File(destDir);
            if (!dest.exists()){
                dest.mkdirs();
            }
            Files.copy(Paths.get(path), Paths.get(destFile), StandardCopyOption.REPLACE_EXISTING);
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // выводит самое длинное слово в файле - greplong
    public static void printLongestWord(String path) {
        try {
            String res = "";
            String temp;
            Scanner scan = new Scanner(new File(path));
            while (scan.hasNext()) {
                temp = scan.next();
                if (temp.length() > res.length()) {
                    res = temp;
                }
            }
            System.out.println(res);
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // выводит список команд и их описание - help
    public static void help() {
        try {
            File read_file = new File("src/manual.txt");
            Scanner obj = new Scanner(read_file);
            while (obj.hasNextLine()) {
                System.out.println(obj.nextLine());
            }
        } catch (Exception e) {
            System.out.printf("%s", e);
        }
    };
    // завершает работу программы - exit
    public static void exit() {
        System.out.println("Goodbye");
        System.exit(0);
    };
}